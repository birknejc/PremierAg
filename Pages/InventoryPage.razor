@page "/inventorypage"
@page "/inventory/edit/{inventoryId:int}"
@using PAS.Models
@using PAS.Services
@using Microsoft.AspNetCore.WebUtilities
@inject InventoryService InventoryService
@inject ConversionService ConversionService
@inject NavigationManager NavigationManager

<h3>Inventory</h3>
<button class="btn btn-primary" @onclick="ShowAddInventoryModal">Add Inventory</button>

@if (inventoryList != null && inventoryList.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Chemical Name</th>
                <th>EPA #</th>
                <th>Unit of Measure (Purchased)</th>
                <th>Price (Purchased)</th>
                <th>Unit of Measure (Sold)</th>
                <th>Quantity On Hand</th>
                <th>Weighted Average Price</th>
                <th>Quantity Quoted</th>
                <th>Vendor</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inventory in inventoryList.OrderBy(inventory => inventory.ChemicalName))
            {
                <tr>
                    <td>@inventory.ChemicalName</td>
                    <td>@inventory.EPA</td>
                    <td>@inventory.UnitOfMeasurePurchase</td>
                    <td>@inventory.Price</td>
                    <td>@inventory.UnitOfMeasure</td>
                    <td>@inventory.QuantityOnHand</td>
                    <td>@inventory.WeightedAveragePrice</td>
                    <td>@inventory.QuantityQuoted</td>
                    <td>@inventory.Vendor.BusinessName</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditInventory(inventory.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteInventory(inventory.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No inventory items found.</p>
}

@if (showAddModal)
{
    <div class="modal" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEditMode ? "Edit Inventory" : "Add Inventory"))</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newInventory" OnValidSubmit="HandleAddInventory">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="chemicalName">Chemical Name</label>
                            <InputText id="chemicalName" class="form-control" @bind-Value="newInventory.ChemicalName" />
                        </div>

                        <div class="form-group">
                            <label for="epa">EPA #</label>
                            <InputText id="epa" class="form-control" @bind-Value="newInventory.EPA" />
                        </div>

                        <div class="form-group">
                            <label for="unitOfMeasurePurchase">Unit of Measure (Purchased)</label>
                            <InputSelect id="unitOfMeasurePurchase" class="form-control" @bind-Value="newInventory.UnitOfMeasurePurchase">
                                <option value="">Select Unit of Measure</option>
                                @foreach (var conversion in puomConversions)
                                {
                                    <option value="@conversion.PUOM">@conversion.PUOM</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="price">Price</label>
                            <InputNumber id="price" class="form-control" @bind-Value="newInventory.Price" />
                        </div>

                        <div class="form-group">
                            <label for="unitOfMeasure">Unit of Measure (Sold)</label>
                            <InputSelect id="unitOfMeasure" class="form-control" @bind-Value="newInventory.UnitOfMeasure">
                                <option value="">Select Unit of Measure</option>
                                @foreach (var conversion in suomConversions)
                                {
                                    <option value="@conversion.SUOM">@conversion.SUOM</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="vendorId">Vendor</label>
                            <InputSelect id="vendorId" class="form-control" @bind-Value="newInventory.VendorId">
                                <option value="">Select Vendor</option>
                                @foreach (var vendor in vendors)
                                {
                                    <option value="@vendor.Id">@vendor.BusinessName</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="quantityOnHand">Quantity On Hand</label>
                            <InputNumber id="quantityOnHand" class="form-control" @bind-Value="newInventory.QuantityOnHand" />
                        </div>

                        <div class="form-group">
                            <label for="weightedAveragePrice">Weighted Average Price</label>
                            <InputNumber id="weightedAveragePrice" class="form-control" @bind-Value="newInventory.WeightedAveragePrice" />
                        </div>

                        <div class="form-group">
                            <label for="quantityQuoted">Quantity Quoted</label>
                            <InputNumber id="quantityQuoted" class="form-control" @bind-Value="newInventory.QuantityQuoted" />
                        </div>

                        <button type="submit" class="btn btn-success">@((isEditMode ? "Update" : "Add"))</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Inventory> inventoryList = new List<Inventory>();
    private List<Vendor> vendors = new List<Vendor>();
    private List<UOMConversion> puomConversions = new List<UOMConversion>();
    private List<UOMConversion> suomConversions = new List<UOMConversion>();
    private Inventory newInventory = new Inventory();
    private bool showAddModal = false;
    private bool isEditMode = false;

    [Parameter]
    public int? InventoryId { get; set; }

    private string ReturnUrl { get; set; } // Parameter to store the return URL

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrl))
        {
            ReturnUrl = returnUrl;
        }

        if (InventoryId.HasValue)
        {
            await EditInventory(InventoryId.Value);
        }
        else
        {
            inventoryList = await InventoryService.GetAllInventoriesAsync();
        }

        vendors = await InventoryService.GetAllVendorsAsync();
        puomConversions = await ConversionService.GetAllConversionsAsync();
        suomConversions = await ConversionService.GetAllConversionsAsync();
    }

    private void ShowAddInventoryModal()
    {
        newInventory = new Inventory();
        showAddModal = true;
        isEditMode = false;
    }

    private void HideModal()
    {
        showAddModal = false;
        isEditMode = false;
    }

    private async Task HandleAddInventory()
    {
        if (isEditMode)
        {
            await InventoryService.UpdateInventoryAsync(newInventory); // Update existing inventory
        }
        else
        {
            await InventoryService.AddInventoryAsync(newInventory); // Add new inventory
        }

        inventoryList = await InventoryService.GetAllInventoriesAsync();
        showAddModal = false;
        isEditMode = false;

        // Navigate back to the return URL if provided
        if (!string.IsNullOrEmpty(ReturnUrl))
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }
    }

    private async Task EditInventory(int id)
    {
        var inventory = await InventoryService.GetInventoryByIdAsync(id);
        if (inventory != null)
        {
            newInventory = inventory;
            showAddModal = true;
            isEditMode = true; // Set edit mode flag
        }
    }

    private async Task DeleteInventory(int id)
    {
        await InventoryService.DeleteInventoryAsync(id);
        inventoryList = await InventoryService.GetAllInventoriesAsync();
    }
}


