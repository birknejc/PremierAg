@page "/loadmixpage"
@using PAS.Models
@using PAS.Services
@inject QuoteService QuoteService
@inject LoadMixService LoadMixService
@inject InventoryService InventoryService
@inject FieldService FieldService
@inject ConversionService ConversionService
@inject ILogger<LoadMixPage> Logger
@inject IJSRuntime JSRuntime

<h3>Load Mix Management</h3>

<button class="btn btn-primary" @onclick="ToggleLoadMixForm">Add Load Sheet</button>

@if (!isAddingLoadSheet && !isEditingLoadMix)
{
    <!-- Initially hidden, displayed when "Add Load Sheet" is clicked -->
}
else if (isAddingLoadSheet)
{
    <div class="row">
        <div class="col-md-6">
            <label>Quote:</label>
            <select class="form-control" @onchange="@(async (ChangeEventArgs e) => await OnQuoteChanged(e))">
                <option value="0">Select Quote</option>
                <option value="-1">No Quote</option>
                @foreach (var quote in quotes)
                {
                    <option value="@quote.Id">Quote #@quote.Id - @quote.CustomerBusinessName</option>
                }
            </select>
        </div>
    </div>
}

else if (isEditingLoadMix)
{
    <div class="row">
        <div class="col-md-6">
            <label>Quote:</label>
            <input type="text" class="form-control" value="@(selectedQuoteId == -1 ? "No Quote" : $"Quote #{selectedQuoteId} - {quotes.FirstOrDefault(q => q.Id == selectedQuoteId)?.CustomerBusinessName}")" readonly="true" />
        </div>
    </div>
}

@if (showLoadMixForm)
{
    <div class="row">
        <div class="col-md-6">
            <label>Date:</label>
            <InputDate class="form-control" @bind-Value="newLoadMix.LoadDate" />
        </div>
        <div class="col-md-6">
            <label>Time:</label>
            <InputText class="form-control" @bind-Value="loadTimeString" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <label>Crop:</label>
            <InputText class="form-control" @bind-Value="newLoadMix.Crop" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <label>Total Gallons:</label>
            <InputNumber class="form-control" @bind-Value="newLoadMix.TotalGallons" @oninput="OnTotalGallonsChanged" />
        </div>
        <div class="col-md-6">
            <label>Total Acres:</label>
            <InputNumber class="form-control" @bind-Value="newLoadMix.TotalAcres" @oninput="OnTotalAcresChanged" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <label>Rate Per Acre:</label>
            <div class="form-control">@newLoadMix.LMRatePerAcre</div>
        </div>
    </div>

    @if (selectedQuoteId == -1) // "No Quote" option selected
    {
        <div class="row">
            <div class="col-md-12">
                <h4>Inventory Selection</h4>
                @foreach (var quoteInventory in manualProducts)
                {
                    @if (quoteInventory.InventoryId ==-1) // Existing inventory item
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <label>Inventory Item:</label>
                                <InputText class="form-control" @bind-Value="quoteInventory.ChemicalName" readonly="true" />
                            </div>
                        </div>
                    }
                    else // New inventory item being added
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <label>Inventory Item:</label>
                                <select class="form-control" @onchange="(e) => HandleInventoryChange(quoteInventory, e)">
                                    <option value="0">-- Select Inventory --</option>
                                    @foreach (var inventory in Inventories)
                                    {
                                        <option value="@inventory.Id">@inventory.ChemicalName</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-6">
                            <label>EPA:</label>
                            <InputText class="form-control" @bind-Value="quoteInventory.EPA" readonly="true" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <label>Purchased Price:</label>
                            <InputNumber class="form-control" @bind-Value="quoteInventory.Price" readonly="true" />
                        </div>

                        <div class="col-md-6">
                            <label>Unit of Measure:</label>
                            <InputText class="form-control" @bind-Value="quoteInventory.UnitOfMeasure" readonly="true" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <label>Quote Price:</label>
                            <InputNumber class="form-control" @bind-Value="quoteInventory.QuotePrice" />
                        </div>

                        @if (isEditingLoadMix && selectedQuoteId == -1)
                        {
                            <div class="col-md-6">
                                <label>Unit of Measure/Acre:</label>
                                <InputText class="form-control" @bind-Value="quoteInventory.QuoteUnitOfMeasure" readonly="true" />
                            </div>
                        }
                        else
                        {
                            <div class="col-md-6">
                                <label>Unit of Measure/Acre:</label>
                                <InputSelect class="form-control" @bind-Value="quoteInventory.QuoteUnitOfMeasure">
                                    <option value="">Select Unit of Measure</option>
                                    @foreach (var conversion in UOMConversions)
                                    {
                                        <option value="@conversion.QUOM">@conversion.QUOM</option>
                                    }
                                </InputSelect>
                            </div>
                        }

                        <div class="col-md-6">
                            <label>Quantity Per Acre:</label>
                            <InputNumber class="form-control" @bind-Value="quoteInventory.QuantityPerAcre" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <button type="button" class="btn btn-danger" @onclick="() => RemoveInventory(quoteInventory)">Remove</button>
                            </div>
                        </div>
                    </div>
                }

                <button type="button" class="btn btn-secondary" @onclick="AddNewInventory">Add Inventory</button>
            </div>
        </div>
    }

    else // Quote selected
    {
        <div class="row">
            <div class="col-md-12">
                <h4>Products, Rates, and Totals</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Rate/Acre</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var inventory in quoteInventories)
                        {
                            var quoteInventory = quotes.SelectMany(q => q.QuoteInventories)
                            .FirstOrDefault(qi => qi.Id == inventory.Id);
                            if (quoteInventory != null)
                            {
                                var conversionFactor = UOMConversions.FirstOrDefault(c => c.SUOM == inventory.UnitOfMeasure && c.QUOM == inventory.QuoteUnitOfMeasure)?.ConversionFactor ?? 1M;
                                <tr>
                                    <td>@inventory.ChemicalName</td>
                                    <td>@($"{inventory.QuantityPerAcre} {quoteInventory.QuoteUnitOfMeasure}")</td>
                                    <td>@($"{Math.Round((newLoadMix.TotalAcres * (decimal)inventory.QuantityPerAcre) / conversionFactor, 1)} {quoteInventory.UnitOfMeasure}")</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <h4>Field Information</h4>
    @foreach (var field in loadFields)
    {
        <div class="row">
            <div class="col-md-6">
                <label>Field Name:</label>
                <InputSelect class="form-control" @bind-Value="field.SelectedFieldId" @onchange="(e) => OnFieldIdChanged(field, e)">
                    <option value="">Select Field</option>
                    @foreach (var customerField in customerFields)
                    {
                        <option value="@customerField.Id">@customerField.FieldName</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-6">
                <label>Average Rate:</label>
                <InputNumber class="form-control" @bind-Value="field.FieldAverageRate" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label>Total Gallons:</label>
                <InputNumber class="form-control" @bind-Value="field.FieldTotalGallons" />
            </div>
            <div class="col-md-6">
                <label>Field Acres:</label>
                <InputNumber class="form-control" @bind-Value="field.FieldAcres" />
            </div>
        </div>
        <hr />
    }

    <button class="btn btn-primary" @onclick="AddField">Add Field</button>
    <button class="btn btn-success" @onclick="SaveLoadMix">Save Load Mix</button>
}

<br />
<hr />

<h4 class="no-print">Saved Load Mixes</h4>
<table class="table table-striped no-print">
    <thead>
        <tr>
            <th>Load #</th> <!-- Added Load # column -->
            <th>Customer</th>
            <th>Date</th>
            <th>Time</th>
            <th>Crop</th>
            <th>Total Gallons</th>
            <th>Total Acres</th>
            <th>Rate Per Acre</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var loadMix in loadMixList)
        {
            <tr>
                <td>@loadMix.Id</td> <!-- Display Load # -->
                <td>@(loadMix.Quote != null ? loadMix.Quote.CustomerBusinessName : "No Quote")</td>
                <td>@loadMix.LoadDate.ToString("yyyy-MM-dd")</td>
                <td>@loadMix.LoadTime</td>
                <td>@loadMix.Crop</td>
                <td>@loadMix.TotalGallons</td>
                <td>@loadMix.TotalAcres</td>
                <td>@loadMix.LMRatePerAcre</td>
                <td>
                    <button class="btn btn-primary btn-sm no-print" @onclick="() => EditLoadMix(loadMix.Id)">Edit</button>
                    <button class="btn btn-danger btn-sm no-print" @onclick="() => DeleteLoadMix(loadMix.Id)">Delete</button>
                    <button class="btn btn-secondary btn-sm no-print" @onclick="() => PrintLoadMix(loadMix.Id)">Print Load Mix</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Quote> quotes = new();
    private List<QuoteInventory> quoteInventories = new();
    private List<LoadMix> loadMixList = new();
    private LoadMix newLoadMix = new();
    private List<LoadFields> loadFields = new();
    private bool showLoadMixForm = false;
    private string loadTimeString;
    private int selectedQuoteId;
    private List<Field> customerFields = new();
    private List<QuoteInventory> manualProducts = new(); // List of inventory items for "No Quote"
    private List<Inventory> Inventories = new(); // List of all inventory items
    private List<UOMConversion> UOMConversions = new(); // List of unit of measure conversions
    private decimal calculatedPurchasedPrice;
    private bool isEditingLoadMix = false;
    private bool isAddingLoadSheet = false;

    protected override async Task OnInitializedAsync()
    {
        selectedQuoteId = 0; // Initialize selectedQuoteId to a default value
        quotes = await QuoteService.GetQuotesAsync();
        Inventories = await InventoryService.GetAllInventoriesAsync(); // Load all inventory items
        UOMConversions = await ConversionService.GetAllConversionsAsync(); // Load all unit of measure conversions

        loadMixList = (await LoadMixService.GetAllLoadMixesAsync())
                       .OrderByDescending(lm => lm.Id)
                       .Take(10)
                       .ToList();

        StateHasChanged(); // Ensure UI is updated
    }

    private async Task OnQuoteChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int quoteId))
        {
            selectedQuoteId = quoteId;

            if (quoteId == -1) // "No Quote" option selected
            {
                quoteInventories = new List<QuoteInventory>(); // Clear quote inventories
                customerFields = await LoadAllFields(); // Load all fields
                manualProducts = new List<QuoteInventory>(); // Initialize manual products
                showLoadMixForm = true; // Show the form for manual input
                isEditingLoadMix = false;
            }
            else
            {
                await LoadQuoteInventories();
            }

            StateHasChanged();
        }
    }

    private async Task LoadQuoteInventories()
    {
        var quote = await QuoteService.GetQuoteByIdAsync(selectedQuoteId);
        if (quote != null && quote.QuoteInventories.Any())
        {
            quoteInventories = quote.QuoteInventories.ToList();
            customerFields = await GetCustomerFields(quote.CustomerId);
            showLoadMixForm = true; // Ensure the form is displayed
        }
        else
        {
            quoteInventories = new List<QuoteInventory>();
            customerFields = new List<Field>();
            showLoadMixForm = false; // Ensure the form is hidden
        }
        StateHasChanged();
    }

    private void AddNewInventory()
    {
        var newInventory = new QuoteInventory
            {
                InventoryId = 0, // Use a unique temporary ID for new items
                Inventory = new Inventory(),  // Ensure the Inventory property is initialized
                ChemicalName = ""
            };
        manualProducts.Add(newInventory); // Add to manual products list
        StateHasChanged(); // Force the UI to refresh and reflect changes
    }

    private async Task HandleInventoryChange(QuoteInventory quoteInventory, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int inventoryId))
        {
            quoteInventory.InventoryId = inventoryId;

            // Get the selected inventory
            var selectedInventory = Inventories.FirstOrDefault(i => i.Id == inventoryId);
            if (selectedInventory != null)
            {
                quoteInventory.ChemicalName = selectedInventory.ChemicalName;
                quoteInventory.EPA = selectedInventory.EPA;
                quoteInventory.Price = selectedInventory.Price;
                quoteInventory.UnitOfMeasure = selectedInventory.UnitOfMeasure;

                // Calculate and set the purchased price for "No Quote" scenario
                if (selectedQuoteId == -1) // "No Quote" scenario
                {
                    calculatedPurchasedPrice = await GetCalculatedPurchasedPrice(quoteInventory);
                }
            }

            StateHasChanged(); // Force the UI to refresh and reflect changes
        }
    }

    private async void RemoveInventory(QuoteInventory quoteInventory)
    {
        var inventoriesToCheck = selectedQuoteId == -1 ? manualProducts : quoteInventories;

        if (inventoriesToCheck.Count <= 1)
        {
            await JSRuntime.InvokeVoidAsync("alert", "At least one inventory item is required. Cannot remove the last item.");
            return;
        }

        if (quoteInventory.InventoryId == 0) // New, unsaved inventory item
        {
            manualProducts.Remove(quoteInventory); // Remove from manual products list
        }
        else // Existing inventory item
        {
            if (manualProducts.Contains(quoteInventory))
            {
                manualProducts.Remove(quoteInventory); // Remove from manual products list
            }

            if (quoteInventories.Contains(quoteInventory))
            {
                quoteInventories.Remove(quoteInventory); // Remove from quote inventories list
            }

            // Remove the inventory from the database based on Product name and LoadMixId
            await LoadMixService.RemoveLoadMixDetailsAsync(newLoadMix.Id, quoteInventory.ChemicalName);
        }

        StateHasChanged(); // Force the UI to refresh and reflect changes
    }

    private async Task<List<Field>> LoadAllFields()
    {
        // Replace with actual implementation to load all fields
        // Assuming you have a service method to get all fields
        return await FieldService.GetAllFieldsAsync();
    }

    private async Task<List<Field>> GetCustomerFields(int customerId)
    {
        return await QuoteService.GetFieldsByCustomerIdAsync(customerId);
    }

    private void OnTotalGallonsChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int value))
        {
            newLoadMix.TotalGallons = value;
        }
        CalculateLMRatePerAcre();
    }

    private void OnTotalAcresChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int value))
        {
            newLoadMix.TotalAcres = value;
        }
        CalculateLMRatePerAcre();
    }

    private void CalculateLMRatePerAcre()
    {
        if (newLoadMix.TotalAcres != 0)
        {
            newLoadMix.LMRatePerAcre = newLoadMix.TotalGallons / newLoadMix.TotalAcres;
        }
        else
        {
            newLoadMix.LMRatePerAcre = 0;
        }
        StateHasChanged();
    }

    private void AddField()
    {
        var newField = new LoadFields { SelectedFieldId = 0, FieldName = "New Field" };
        loadFields.Add(newField);
        StateHasChanged();
    }

    private async void OnFieldIdChanged(LoadFields field, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedFieldId))
        {
            field.SelectedFieldId = selectedFieldId; // Use the SelectedFieldId instead of Id

            var selectedField = customerFields.FirstOrDefault(f => f.Id == selectedFieldId);
            if (selectedField != null)
            {
                field.FieldName = selectedField.FieldName;
            }
            else
            {
                field.FieldName = "Default Field Name";
            }
        }
        else
        {
            field.FieldName = "Default Field Name";
        }
        StateHasChanged(); // Ensure UI update
    }

    private async Task SaveLoadMix()
    {
        if (TimeSpan.TryParse(loadTimeString, out var parsedTime))
        {
            newLoadMix.LoadTime = parsedTime;
        }

        newLoadMix.LoadDate = newLoadMix.LoadDate.ToUniversalTime();
        newLoadMix.QuoteId = selectedQuoteId == -1 ? (int?)null : selectedQuoteId;

        CalculateLMRatePerAcre();

        if (string.IsNullOrEmpty(newLoadMix.Crop))
        {
            newLoadMix.Crop = "Default Crop";
        }

        // Check if the LoadMix already exists
        var existingLoadMix = await LoadMixService.GetLoadMixByIdAsync(newLoadMix.Id);
        if (existingLoadMix != null)
        {
            // Update the existing LoadMix
            existingLoadMix.LoadDate = newLoadMix.LoadDate;
            existingLoadMix.LoadTime = newLoadMix.LoadTime;
            existingLoadMix.Crop = newLoadMix.Crop;
            existingLoadMix.TotalGallons = newLoadMix.TotalGallons;
            existingLoadMix.TotalAcres = newLoadMix.TotalAcres;
            existingLoadMix.LMRatePerAcre = newLoadMix.LMRatePerAcre;
            existingLoadMix.QuoteId = newLoadMix.QuoteId;

            await LoadMixService.UpdateLoadMixAsync(existingLoadMix);
        }
        else
        {
            // Add the new LoadMix
            await LoadMixService.AddLoadMixAsync(newLoadMix);
        }

        var inventoriesToSave = selectedQuoteId == -1 ? manualProducts : quoteInventories;
        var existingDetails = await LoadMixService.GetLoadMixDetailsByLoadMixIdAsync(newLoadMix.Id);

        foreach (var inventory in inventoriesToSave)
        {
            // Convert to lower case and trim to ensure consistency
            var unitOfMeasure = inventory.UnitOfMeasure?.ToLower().Trim();
            var quoteUnitOfMeasure = inventory.QuoteUnitOfMeasure?.ToLower().Trim();

            // Check for matching conversion
            var conversion = UOMConversions.FirstOrDefault(c => c.SUOM.ToLower().Trim() == unitOfMeasure && c.QUOM.ToLower().Trim() == quoteUnitOfMeasure);

            var conversionFactor = conversion?.ConversionFactor ?? 1M;

            var total = Math.Round((newLoadMix.TotalAcres * (decimal)inventory.QuantityPerAcre) / conversionFactor, 1);

            var loadMixDetails = new LoadMixDetails
                {
                    LoadMixId = newLoadMix.Id,
                    Product = inventory.ChemicalName, // Save ChemicalName
                    RatePerAcre = $"{inventory.QuantityPerAcre} {inventory.QuoteUnitOfMeasure}",
                    Total = $"{total} {inventory.UnitOfMeasure}",
                    // Save additional fields for No Quote
                    EPA = selectedQuoteId == -1 ? inventory.EPA : null,
                    Price = selectedQuoteId == -1 ? inventory.Price : null,
                    QuotePrice = selectedQuoteId == -1 ? inventory.QuotePrice : null,
                    QuoteUnitOfMeasure = selectedQuoteId == -1 ? inventory.QuoteUnitOfMeasure : null
                };

            // Check if LoadMixDetails already exist by comparing Product and LoadMixId
            var detailToUpdate = existingDetails.FirstOrDefault(d => d.Product == loadMixDetails.Product && d.LoadMixId == loadMixDetails.LoadMixId);

            if (detailToUpdate != null)
            {
                // Update existing details
                detailToUpdate.RatePerAcre = loadMixDetails.RatePerAcre;
                detailToUpdate.Total = loadMixDetails.Total;
                detailToUpdate.EPA = loadMixDetails.EPA;
                detailToUpdate.Price = loadMixDetails.Price;
                detailToUpdate.QuotePrice = loadMixDetails.QuotePrice;
                detailToUpdate.QuoteUnitOfMeasure = loadMixDetails.QuoteUnitOfMeasure;

                await LoadMixService.UpdateLoadMixDetailsAsync(detailToUpdate);
            }
            else
            {
                // Add new details
                await LoadMixService.AddLoadMixDetailsAsync(loadMixDetails);
            }
        }

        foreach (var field in loadFields)
        {
            field.LoadMixId = newLoadMix.Id;

            var selectedField = customerFields.FirstOrDefault(f => f.Id == field.SelectedFieldId);
            if (selectedField != null)
            {
                field.FieldName = selectedField.FieldName;
            }

            // Check if LoadField already exists
            var existingField = await LoadMixService.GetLoadFieldByIdAsync(field.Id);
            if (existingField != null)
            {
                // Update existing field
                existingField.SelectedFieldId = field.SelectedFieldId;
                existingField.FieldAverageRate = field.FieldAverageRate;
                existingField.FieldTotalGallons = field.FieldTotalGallons;
                existingField.FieldAcres = field.FieldAcres;

                await LoadMixService.UpdateLoadFieldAsync(existingField);
            }
            else
            {
                // Add new field
                await LoadMixService.AddLoadFieldAsync(field);
            }
        }

        loadMixList = (await LoadMixService.GetAllLoadMixesAsync()).OrderByDescending(lm => lm.Id).Take(10).ToList();

        newLoadMix = new LoadMix();
        loadFields = new List<LoadFields>();
        quoteInventories = new List<QuoteInventory>();
        manualProducts = new List<QuoteInventory>();
        loadTimeString = string.Empty;
        selectedQuoteId = 0;
        showLoadMixForm = false;

        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("location.reload");
    }

    private async Task EditLoadMix(int id)
    {
        var loadMix = await LoadMixService.GetLoadMixByIdAsync(id);
        if (loadMix != null)
        {
            newLoadMix = loadMix;
            selectedQuoteId = loadMix.QuoteId.GetValueOrDefault();
            loadTimeString = loadMix.LoadTime.ToString(@"hh\:mm\:ss");
            showLoadMixForm = true;
            isEditingLoadMix = true;

            // Clear the manualProducts list before populating it
            manualProducts.Clear();

            // Initialize loadFields if null and load associated fields
            loadFields = loadMix.LoadFields ?? new List<LoadFields>();

            // Check if the load mix was created with "No Quote"
            if (!loadMix.QuoteId.HasValue)
            {
                selectedQuoteId = -1;
                var loadMixDetails = await LoadMixService.GetLoadMixDetailsByLoadMixIdAsync(loadMix.Id);

                if (loadMixDetails != null && loadMixDetails.Any())
                {
                    manualProducts = loadMixDetails.Select(lmd => new QuoteInventory
                        {
                            InventoryId = -1,  // Use a placeholder since we're not using actual InventoryId
                            ChemicalName = lmd.Product,
                            QuantityPerAcre = decimal.Parse(lmd.RatePerAcre.Split(' ')[0]),
                            //UnitOfMeasure = lmd.RatePerAcre.Split(' ')[1],
                            UnitOfMeasure = Inventories.FirstOrDefault(i => i.ChemicalName == lmd.Product)?.UnitOfMeasure,

                            // Populate additional fields
                            EPA = lmd.EPA,
                            Price = lmd.Price ?? 0,
                            QuotePrice = lmd.QuotePrice ?? 0,
                            QuoteUnitOfMeasure = lmd.QuoteUnitOfMeasure
                        }).ToList();
                }
                else
                {
                    // Handle the case where no LoadMixDetails are found
                }
            }
            else
            {
                await LoadQuoteInventories();
            }

            customerFields = await LoadAllFields();

            // Ensure UI is updated
            StateHasChanged();
        }
    }

    private async Task DeleteLoadMix(int id)
    {
        await LoadMixService.DeleteLoadMixAsync(id);
        loadMixList = await LoadMixService.GetAllLoadMixesAsync();
        StateHasChanged();
    }

    private async Task PrintLoadMix(int loadMixId)
    {
        var loadMix = await LoadMixService.GetLoadMixWithDetailsAndFieldsByIdAsync(loadMixId);

        if (loadMix != null)
        {
            var templatePath = "print_loadmixtemplate.html";
            var templateContent = await File.ReadAllTextAsync(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", templatePath));

            var loadMixRows = loadMix.LoadMixDetails != null
                ? string.Join("", loadMix.LoadMixDetails.Select(detail =>
                    $"<tr><td>{detail.Product}</td><td>{detail.RatePerAcre}</td><td>{detail.Total}</td></tr>"
                ))
                : "";

            var fieldsAppliedToRows = loadMix.LoadFields != null
                ? string.Join("", loadMix.LoadFields.Select(field =>
                    $"<tr><td>{field.FieldName}</td><td>{field.FieldAverageRate}</td><td>{field.FieldTotalGallons}</td><td>{field.FieldAcres}</td></tr>"
                ))
                : "";

            templateContent = templateContent
                .Replace("{{LoadId}}", loadMix.Id.ToString())
                .Replace("{{LoadDate}}", loadMix.LoadDate.ToString("yyyy-MM-dd"))
                .Replace("{{LoadTime}}", loadMix.LoadTime.ToString(@"hh\:mm\:ss"))
                .Replace("{{Crop}}", loadMix.Crop ?? "")
                .Replace("{{TotalAcres}}", loadMix.TotalAcres.ToString())
                .Replace("{{TotalGallons}}", loadMix.TotalGallons.ToString())
                .Replace("{{RatePerAcre}}", loadMix.LMRatePerAcre.ToString())
                .Replace("{{LoadMixRows}}", loadMixRows)
                .Replace("{{FieldsAppliedToRows}}", fieldsAppliedToRows);

            try
            {
                await JSRuntime.InvokeVoidAsync("openPrintWindow", templateContent);
            }
            catch (TaskCanceledException ex)
            {
                Logger.LogWarning("The print preview was left open for too long, and the task was canceled. Exception: {Message}", ex.Message);
;
            }
            catch (Exception ex)
            {
                Logger.LogError("An error occurred: {Message}", ex.Message);
            }

        }
    }

    private async Task<decimal> GetCalculatedPurchasedPrice(QuoteInventory quoteInventory)
    {
        // Find the related inventory based on InventoryId
        var inventory = Inventories.FirstOrDefault(i => i.Id == quoteInventory.InventoryId);

        if (inventory != null)
        {
            // Fetch the appropriate conversion using UnitOfMeasurePurchase and UnitOfMeasure
            var conversion = UOMConversions.FirstOrDefault(c => c.PUOM == inventory.UnitOfMeasurePurchase && c.SUOM == inventory.UnitOfMeasure);

            if (conversion != null && conversion.CFPurSold != 0)
            {
                var calculatedPrice = quoteInventory.Price / conversion.CFPurSold;
                quoteInventory.Price = calculatedPrice; // Save the calculated price to quoteInventory.Price

                // Save the calculated price to quoteInventory.Price
                quoteInventory.Price = calculatedPrice;

                return quoteInventory.Price;
            }
        }

        return quoteInventory.Price;
    }

    private void ToggleLoadMixForm()
    {
        if (showLoadMixForm)
        {
            // Form is currently open, so we'll close it
            showLoadMixForm = false;
            isAddingLoadSheet = false;
            isEditingLoadMix = false;
        }
        else
        {
            // Form is currently closed, so we'll open it for adding a new load sheet
            showLoadMixForm = true;
            isAddingLoadSheet = true;
            isEditingLoadMix = false;
            newLoadMix = new LoadMix();
            loadFields = new List<LoadFields>();
            quoteInventories = new List<QuoteInventory>();
            manualProducts = new List<QuoteInventory>();
            loadTimeString = string.Empty;
            selectedQuoteId = 0;
        }
        StateHasChanged(); // Ensure the UI is updated to reflect changes
    }

}
