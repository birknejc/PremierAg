@page "/purchaseorderpage"
@page "/purchaseorderpage/{PurchaseOrderId:int}"
@using PAS.Models
@using PAS.Services
@inject PurchaseOrderService PurchaseOrderService
@inject VendorService VendorService
@inject PurchaseOrderState PurchaseOrderState
@inject InventoryService InventoryService
@inject NavigationManager NavigationManager
@inject ILogger<PurchaseOrderPage> Logger
@inject IJSRuntime JSRuntime

<h3>Purchase Order Management</h3>

<button class="btn btn-primary" @onclick="ToggleForm">Add Purchase Order</button>

@if (showForm)
{
    <div>
        <EditForm Model="NewPurchaseOrder" OnValidSubmit="AddPurchaseOrder">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Form fields for editing NewPurchaseOrder -->
            <div class="container">
                <div class="form-group">
                    <label for="poNumber">Purchase Order Number</label>
                    <InputText id="poNumber" @bind-Value="NewPurchaseOrder.PONumber" class="form-control" readonly />
                </div>

                <div class="form-group">
                    <label for="orderDate">Order Date (MM/DD/YYYY)</label>
                    <InputText id="orderDate" @bind-Value="OrderDateFormatted" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="paymentDueDate">Payment Due Date (MM/DD/YYYY)</label>
                    <InputText id="paymentDueDate" @bind-Value="PaymentDueDateFormatted" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="deliveryPickUpDate">Delivery/Pick Up Date (MM/DD/YYYY)</label>
                    <InputText id="deliveryPickUpDate" @bind-Value="DeliveryPickUpDateFormatted" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="pickUpLocation">Pick Up Location</label>
                    <InputText id="pickUpLocation" @bind-Value="NewPurchaseOrder.PickUpLocation" class="form-control" />
                </div>

                <!-- Items Section -->
                <h5>Items</h5>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Chemical</th>
                            <th>Unit of Measure</th>
                            <th>Price</th>
                            <th>Quantity Ordered</th>
                            <th>Total Cost</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in NewPurchaseOrder.Items)
                        {
                            <tr>
                                <td>@item.ChemicalName</td>
                                <td>@item.UnitOfMeasurePurchase</td>
                                <td>@item.Price</td>
                                <td>@item.QuantityOrdered</td>
                                <td>@(item.Price * item.QuantityOrdered)</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="form-group">
                    <label for="chemicalName">Select Chemical</label>
                    <InputSelect id="chemicalName" @bind-Value="SelectedChemicalId" class="form-control">
                        <option value="">Select a Chemical</option>
                        @{
                            var sortedChemicals = Chemicals.OrderBy(c => c.ChemicalName).ToList();
                        }
                        @foreach (var chemical in sortedChemicals)
                        {
                            <option value="@chemical.Id">
                                @chemical.ChemicalName (@chemical.UnitOfMeasurePurchase, @chemical.Vendor?.BusinessName)
                            </option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="epaNumber">EPA Number</label>
                    <InputText id="epaNumber" @bind-Value="NewItem.EPANumber" class="form-control" readonly />
                </div>

                <div class="form-group">
                    <label for="unitOfMeasure">Unit of Measure (Purchased)</label>
                    <InputText id="unitOfMeasure" @bind-Value="NewItem.UnitOfMeasurePurchase" class="form-control" readonly />
                </div>

                <div class="form-group">
                    <label for="price">Price</label>
                    <InputNumber id="price" @bind-Value="NewItem.Price" class="form-control" readonly />
                    <button type="button" class="btn btn-link" @onclick="() => UpdatePrice(NewItem.InventoryId)">Update Price</button>
                </div>

                <div class="form-group">
                    <label for="quantityOrdered">Quantity Ordered</label>
                    <InputNumber id="quantityOrdered" @bind-Value="NewItem.QuantityOrdered" class="form-control" />
                </div>

                <button type="button" class="btn btn-secondary" @onclick="AddItem">Add Item</button>
            </div>

            <button type="submit" class="btn btn-primary">@((NewPurchaseOrder.Id == 0) ? "Add Purchase Order" : "Update Purchase Order")</button>
        </EditForm>
    </div>
}

<hr />

<h4>Purchase Orders</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>P.O. Number</th>
            <th>Order Date</th>
            <th>Vendor Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var purchaseOrder in PurchaseOrders.OrderByDescending(po => int.TryParse(po.PONumber, out int poNumber) ? poNumber : 0))
        {
            var allItemsReceived = purchaseOrder.Items.All(item => item.QuantityReceived >= item.QuantityOrdered);
            var allItemsUnreceived = purchaseOrder.Items.All(item => item.QuantityReceived == 0);

            <tr>
                <td>@purchaseOrder.PONumber</td>
                <td>@(purchaseOrder.OrderDate == DateTime.MinValue ? "" : purchaseOrder.OrderDate.ToString("MM/dd/yyyy"))</td>
                <td>@purchaseOrder.BusinessName</td>
                <td>
                    <button class="btn btn-info btn-sm" @onclick="() => PrintPurchaseOrder(purchaseOrder.Id)">Print</button>
                    <button class="btn btn-primary btn-sm" @onclick="() => EditPurchaseOrder(purchaseOrder.Id)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePurchaseOrder(purchaseOrder.Id)">Delete</button>
                    @if (!allItemsReceived)
                    {
                        <button class="btn btn-success btn-sm" @onclick="() => ReceiveAll(purchaseOrder.Id)">Receive All</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowPartialReceiveDialog(purchaseOrder.Id)">Receive Partial</button>
                    }
                    @if (!allItemsUnreceived)
                    {
                        <button class="btn btn-danger btn-sm" @onclick="() => UnreceiveAll(purchaseOrder.Id)">Unreceive All</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowPartialUnreceiveDialog(purchaseOrder.Id)">Unreceive Partial</button>
                    }
                    @if (allItemsReceived && !allItemsUnreceived)
                    {
                        <span class="badge badge-success">Fully Received</span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Partial Receive Dialog -->
@if (showPartialReceiveDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Receive Item</h5>
                    <button type="button" class="close" @onclick="() => showPartialReceiveDialog = false">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @foreach (var item in selectedPurchaseOrder?.Items ?? Enumerable.Empty<PurchaseOrderItem>())
                    {
                        <div class="form-group">
                            <label>Chemical: @item.ChemicalName</label>
                        </div>
                        <div class="form-group">
                            <label>Quantity Ordered</label>
                            <p>@item.QuantityOrdered</p>
                        </div>
                        <div class="form-group">
                            <label>Quantity Received</label>
                            <p>@item.QuantityReceived</p>
                        </div>
                        <div class="form-group">
                            <label>Newly Received Quantity</label>
                            <InputNumber @bind-Value="item.NewQuantityReceived" class="form-control" />
                        </div>
                        <br />  
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showPartialReceiveDialog = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ReceivePartial">Receive</button>
                </div>
            </div>
        </div>
    </div>
}
<!-- Partial Unreceive Dialog -->
@if (showPartialUnreceiveDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Unreceive Item</h5>
                    <button type="button" class="close" @onclick="() => showPartialUnreceiveDialog = false">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @foreach (var item in selectedPurchaseOrder?.Items ?? Enumerable.Empty<PurchaseOrderItem>())
                    {
                        <div class="form-group">
                            <label>Chemical: @item.ChemicalName</label>
                        </div>
                        <div class="form-group">
                            <label>Quantity Ordered</label>
                            <p>@item.QuantityOrdered</p>
                        </div>
                        <div class="form-group">
                            <label>Quantity Received</label>
                            <p>@item.QuantityReceived</p>
                        </div>
                        <div class="form-group">
                            <label>Quantity to Unreceive</label>
                            <InputNumber @bind-Value="item.QuantityUnreceived" class="form-control" />
                        </div>
                        <br />
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showPartialUnreceiveDialog = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UnreceivePartial">Unreceive</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<PurchaseOrder> PurchaseOrders = new();
    private List<Vendor> Vendors = new();
    private List<Inventory> Chemicals = new();
    private PurchaseOrder NewPurchaseOrder = new() { Items = new List<PurchaseOrderItem>() }; // Initialize with empty items list
    private PurchaseOrderItem NewItem = new(); // Item to be added
    private bool showForm = false; // Controls the visibility of the form
    private bool showPartialReceiveDialog = false; // Controls the visibility of the partial receive dialog
    private PurchaseOrder selectedPurchaseOrder; // Selected purchase order for partial receive
    private int selectedItemId;
    private int quantityReceived;
    private bool showPartialUnreceiveDialog = false; // Controls the visibility of the partial unreceive dialog

    // Add the PurchaseOrderId parameter
    [Parameter]
    public int? PurchaseOrderId { get; set; }

    private int SelectedChemicalId
    {
        get => NewItem.InventoryId;
        set
        {
            NewItem.InventoryId = value;
            var selectedChemical = Chemicals.FirstOrDefault(c => c.Id == value);
            if (selectedChemical != null)
            {
                NewItem.ChemicalName = selectedChemical.ChemicalName;
                NewItem.UnitOfMeasurePurchase = selectedChemical.UnitOfMeasurePurchase;
                NewItem.Price = selectedChemical.Price;
                NewItem.EPANumber = selectedChemical.EPA;
                NewPurchaseOrder.BusinessName = selectedChemical.Vendor?.BusinessName ?? ""; // Ensure BusinessName is not null
            }
        }
    }

    private string OrderDateFormatted
    {
        get => NewPurchaseOrder.OrderDate == DateTime.MinValue ? "" : NewPurchaseOrder.OrderDate.ToString("MM/dd/yyyy");
        set => NewPurchaseOrder.OrderDate = DateTime.TryParse(value, out var parsedDate)
            ? DateTime.SpecifyKind(parsedDate, DateTimeKind.Utc)
            : DateTime.MinValue;
    }

    private string PaymentDueDateFormatted
    {
        get => NewPurchaseOrder.PaymentDueDate == DateTime.MinValue ? "" : NewPurchaseOrder.PaymentDueDate.ToString("MM/dd/yyyy");
        set => NewPurchaseOrder.PaymentDueDate = DateTime.TryParse(value, out var parsedDate)
            ? DateTime.SpecifyKind(parsedDate, DateTimeKind.Utc)
            : DateTime.MinValue;
    }

    private string DeliveryPickUpDateFormatted
    {
        get => NewPurchaseOrder.DeliveryPickUpDate == DateTime.MinValue ? "" : NewPurchaseOrder.DeliveryPickUpDate.ToString("MM/dd/yyyy");
        set => NewPurchaseOrder.DeliveryPickUpDate = DateTime.TryParse(value, out var parsedDate)
            ? DateTime.SpecifyKind(parsedDate, DateTimeKind.Utc)
            : DateTime.MinValue;
    }

    private async void ToggleForm()
    {
        if (showForm)
        {
            // Hide the form
            showForm = false;
        }
        else
        {
            // Show the form
            showForm = true;

            // Clear saved state and reset NewPurchaseOrder
            NewPurchaseOrder = new PurchaseOrder { Items = new List<PurchaseOrderItem>() }; // Initialize with empty items list
            NewItem = new PurchaseOrderItem(); // Reset new item
            PurchaseOrderState.CurrentPurchaseOrder = null;
            PurchaseOrderState.CurrentItem = null;

            // Get the last PONumber from the database
            var lastPurchaseOrder = PurchaseOrders.OrderByDescending(po => po.Id).FirstOrDefault();
            int nextPONumber = lastPurchaseOrder != null && int.TryParse(lastPurchaseOrder.PONumber, out var lastPONum)
                ? lastPONum + 1
                : 1;

            // Set the auto-incremented PONumber
            NewPurchaseOrder.PONumber = nextPONumber.ToString();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch existing purchase orders, vendors, and chemicals
        PurchaseOrders = await PurchaseOrderService.GetPurchaseOrdersAsync();
        Vendors = await VendorService.GetVendorsAsync();
        Chemicals = await InventoryService.GetAllInventoriesAsync();

        // Resume state if available
        if (PurchaseOrderState.CurrentPurchaseOrder != null)
        {
            NewPurchaseOrder = PurchaseOrderState.CurrentPurchaseOrder;
            NewItem = PurchaseOrderState.CurrentItem ?? new PurchaseOrderItem();

            // Ensure that after price update, the new price is fetched
            var updatedChemical = await InventoryService.GetInventoryByIdAsync(NewItem.InventoryId);
            if (updatedChemical != null)
            {
                NewItem.Price = updatedChemical.Price;
            }

            showForm = true;
        }
    }

    private async Task AddPurchaseOrder()
    {
        if (NewPurchaseOrder.Items == null || !NewPurchaseOrder.Items.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please add at least one item to the purchase order.");
            return;
        }

        if (NewPurchaseOrder.Id == 0)
        {
            await PurchaseOrderService.AddPurchaseOrderAsync(NewPurchaseOrder);
        }
        else
        {
            await PurchaseOrderService.UpdatePurchaseOrderAsync(NewPurchaseOrder);
        }

        // Refresh the purchase order list
        PurchaseOrders = await PurchaseOrderService.GetPurchaseOrdersAsync();
        NewPurchaseOrder = new PurchaseOrder { Items = new List<PurchaseOrderItem>() }; // Reset form
        showForm = false;

        // Clear state after saving
        PurchaseOrderState.CurrentPurchaseOrder = null;
        PurchaseOrderState.CurrentItem = null;
    }

    private async Task EditPurchaseOrder(int purchaseOrderId)
    {
        var purchaseOrder = await PurchaseOrderService.GetPurchaseOrderByIdAsync(purchaseOrderId);
        if (purchaseOrder != null)
        {
            NewPurchaseOrder = purchaseOrder;
            showForm = true;
        }
    }

    private async Task DeletePurchaseOrder(int purchaseOrderId)
    {
        await PurchaseOrderService.DeletePurchaseOrderAsync(purchaseOrderId);
        PurchaseOrders = await PurchaseOrderService.GetPurchaseOrdersAsync();
    }

    private async Task PrintPurchaseOrder(int purchaseOrderId)
    {
        var purchaseOrder = await PurchaseOrderService.GetPurchaseOrderByIdAsync(purchaseOrderId);

        if (purchaseOrder != null)
        {
            var templatePath = "print_potemplate.html";
            var templateContent = await File.ReadAllTextAsync(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", templatePath));

            var itemsHtml = purchaseOrder.Items != null
                ? string.Join("", purchaseOrder.Items.Select(item =>
                    $"<tr><td>{item.ChemicalName}</td><td>{item.UnitOfMeasurePurchase}</td><td>{item.Price}</td><td>{item.QuantityOrdered}</td><td>{item.QuantityReceived}</td><td>{item.TotalCost}</td></tr>"
                ))
                : "";

            templateContent = templateContent
                .Replace("{{PONumber}}", purchaseOrder.PONumber)
                .Replace("{{OrderDate}}", purchaseOrder.OrderDate.ToString("MM/dd/yyyy"))
                .Replace("{{BusinessName}}", purchaseOrder.BusinessName)
                .Replace("{{PaymentDueDate}}", purchaseOrder.PaymentDueDate.ToString("MM/dd/yyyy"))
                .Replace("{{DeliveryPickUpDate}}", purchaseOrder.DeliveryPickUpDate.ToString("MM/dd/yyyy"))
                .Replace("{{PickUpLocation}}", purchaseOrder.PickUpLocation)
                .Replace("{{ItemsRows}}", itemsHtml);

            try
            {
                await JSRuntime.InvokeVoidAsync("openPrintWindow", templateContent);
            }
            catch (TaskCanceledException ex)
            {
                Logger.LogWarning("The print preview was left open for too long, and the task was canceled. Exception: {Message}", ex.Message);
            }
            catch (Exception ex)
            {
                Logger.LogError("An error occurred: {Message}", ex.Message);
            }
        }
    }

    private async Task ReceiveAll(int purchaseOrderId)
    {
        try
        {
            var purchaseOrder = await PurchaseOrderService.GetPurchaseOrderByIdAsync(purchaseOrderId);
            if (purchaseOrder != null)
            {
                var itemQuantities = new Dictionary<int, int>();
                foreach (var item in purchaseOrder.Items)
                {
                    int remainingQuantity = item.QuantityOrdered - item.QuantityReceived;
                    if (remainingQuantity > 0)
                    {
                        itemQuantities.Add(item.Id, remainingQuantity);
                    }
                }

                await PurchaseOrderService.ReceivePurchaseOrderAsync(purchaseOrderId, itemQuantities);

                PurchaseOrders = await PurchaseOrderService.GetPurchaseOrdersAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void ShowPartialReceiveDialog(int purchaseOrderId)
    {
        selectedPurchaseOrder = PurchaseOrders.FirstOrDefault(po => po.Id == purchaseOrderId);
        foreach (var item in selectedPurchaseOrder.Items)
        {
            item.NewQuantityReceived = 0; // Reset newly received quantity
        }
        showPartialReceiveDialog = true;
    }

    private async Task ReceivePartial()
    {
        try
        {
            var itemQuantities = new Dictionary<int, int>();
            foreach (var item in selectedPurchaseOrder.Items)
            {
                int remainingQuantity = item.QuantityOrdered - item.QuantityReceived;
                if (item.NewQuantityReceived > remainingQuantity)
                {
                    // Handle error without alert
                    return;
                }
                if (item.NewQuantityReceived > 0)
                {
                    itemQuantities.Add(item.Id, item.NewQuantityReceived); // Add only the newly received quantity
                }
            }

            // Call ReceivePurchaseOrderItemAsync for each item in the dictionary
            foreach (var kvp in itemQuantities)
            {
                await PurchaseOrderService.ReceivePurchaseOrderItemAsync(kvp.Key, kvp.Value);
            }

            // Reset NewQuantityReceived to 0 after processing
            foreach (var item in selectedPurchaseOrder.Items)
            {
                item.NewQuantityReceived = 0;
            }

            // Update the purchase order and refresh the list
            PurchaseOrders = await PurchaseOrderService.GetPurchaseOrdersAsync();
            showPartialReceiveDialog = false;
        }
        catch (Exception ex)
        {
            // Handle error without alert
        }
    }


    private void AddItem()
    {
        if (NewItem.InventoryId == 0 || NewItem.QuantityOrdered <= 0)
        {
            JSRuntime.InvokeVoidAsync("alert", "Please select a valid chemical and enter a valid quantity.");
            return;
        }

        NewPurchaseOrder.Items.Add(NewItem);
        NewItem = new PurchaseOrderItem(); // Reset for the next item
    }

    private void RemoveItem(PurchaseOrderItem item)
    {
        NewPurchaseOrder.Items.Remove(item);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PurchaseOrderId.HasValue)
        {
            NewPurchaseOrder = await PurchaseOrderService.GetPurchaseOrderByIdAsync(PurchaseOrderId.Value);
            showForm = true;
        }
        else if (PurchaseOrderState.CurrentPurchaseOrder != null)
        {
            NewPurchaseOrder = PurchaseOrderState.CurrentPurchaseOrder;
            showForm = true;
        }
        else
        {
            showForm = false;
            NewPurchaseOrder = new PurchaseOrder();
        }
    }

    private void UpdatePrice(int inventoryId)
    {
        PurchaseOrderState.CurrentPurchaseOrder = NewPurchaseOrder;
        PurchaseOrderState.CurrentItem = NewItem;

        var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.NavigateTo($"/inventory/edit/{inventoryId}?returnUrl={Uri.EscapeDataString(returnUrl)}&purchaseOrderId={NewPurchaseOrder.Id}");
    }

    private async Task UnreceiveAll(int purchaseOrderId)
    {
        try
        {
            var purchaseOrder = await PurchaseOrderService.GetPurchaseOrderByIdAsync(purchaseOrderId);
            if (purchaseOrder != null)
            {
                var itemQuantities = new Dictionary<int, int>();
                foreach (var item in purchaseOrder.Items)
                {
                    if (item.QuantityReceived > 0)
                    {
                        itemQuantities.Add(item.Id, item.QuantityReceived);
                    }
                }

                await PurchaseOrderService.UnreceivePurchaseOrderAsync(purchaseOrderId, itemQuantities);

                PurchaseOrders = await PurchaseOrderService.GetPurchaseOrdersAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void ShowPartialUnreceiveDialog(int purchaseOrderId)
    {
        selectedPurchaseOrder = PurchaseOrders.FirstOrDefault(po => po.Id == purchaseOrderId);
        foreach (var item in selectedPurchaseOrder.Items)
        {
            item.QuantityUnreceived = 0; // Reset quantity to be unreceived
        }
        showPartialUnreceiveDialog = true;
    }

    private async Task UnreceivePartial()
    {
        try
        {
            var itemQuantities = new Dictionary<int, int>();
            foreach (var item in selectedPurchaseOrder.Items)
            {
                if (item.QuantityUnreceived > 0 && item.QuantityUnreceived <= item.QuantityReceived)
                {
                    itemQuantities.Add(item.Id, item.QuantityUnreceived);
                }
            }

            foreach (var kvp in itemQuantities)
            {
                await PurchaseOrderService.UnreceivePurchaseOrderItemAsync(kvp.Key, kvp.Value);
            }

            // Reset QuantityUnreceived to 0 after processing
            foreach (var item in selectedPurchaseOrder.Items)
            {
                item.QuantityUnreceived = 0;
            }

            // Update the purchase order and refresh the list
            PurchaseOrders = await PurchaseOrderService.GetPurchaseOrdersAsync();
            showPartialUnreceiveDialog = false;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

}
