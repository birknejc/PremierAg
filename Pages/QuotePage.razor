@page "/quotepage"
@inject QuoteService QuoteService
@inject CustomerService CustomerService
@inject InventoryService InventoryService
@inject IJSRuntime JSRuntime
@using PAS.Models
@using PAS.Services

<h3>Quote Management</h3>

<button class="btn btn-primary" @onclick="ToggleQuoteForm">Add Quote</button>

@if (showQuoteForm)
{
    <EditForm Model="NewQuote" OnValidSubmit="SaveQuote">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- First Row: Customer and Phone (2 columns) -->
        <div class="row">
            <div class="col-md-6">
                <label>Customer:</label>
                <InputSelect class="form-control" @bind-Value="SelectedCustomerId">
                    <option value="0">-- Select Customer --</option>
                    @foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.CustomerBusinessName</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-6">
                <label>Phone:</label>
                <InputText class="form-control" @bind-Value="NewQuote.QuotePhone" />
            </div>
        </div>

        <!-- Second Row: Street, City, State, Zipcode (4 columns) -->
        <div class="row">
            <div class="col-md-3">
                <label>Street:</label>
                <InputText class="form-control" @bind-Value="NewQuote.QuoteStreet" />
            </div>

            <div class="col-md-3">
                <label>City:</label>
                <InputText class="form-control" @bind-Value="NewQuote.QuoteCity" />
            </div>

            <div class="col-md-3">
                <label>State:</label>
                <InputText class="form-control" @bind-Value="NewQuote.QuoteState" />
            </div>

            <div class="col-md-3">
                <label>Zipcode:</label>
                <InputText class="form-control" @bind-Value="NewQuote.QuoteZipcode" />
            </div>
        </div>

        <!-- Date Field -->
        <div class="row">
            <div class="col-md-6">
                <label>Date:</label>
                <InputDate class="form-control" @bind-Value="NewQuote.QuoteDate" />
            </div>
        </div>

        <!-- Inventory Items -->
        @foreach (var quoteInventory in NewQuote.QuoteInventories)
        {
            <div class="row">
                <div class="col-md-6">
                    <label>Inventory Item:</label>
                    <select class="form-control" value="@quoteInventory.InventoryId" @onchange="@(e => HandleInventoryChange(quoteInventory, e as ChangeEventArgs))">
                        <option value="0">-- Select Inventory --</option>
                        @foreach (var inventory in Inventories)
                        {
                            <option value="@inventory.Id">@inventory.ChemicalName</option>
                        }
                    </select>
                </div>

                <div class="col-md-6">
                    <label>EPA:</label>
                    <InputText class="form-control" @bind-Value="quoteInventory.EPA" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <label>Price:</label>
                    <InputNumber class="form-control" @bind-Value="quoteInventory.Price" />
                </div>

                <div class="col-md-6">
                    <label>Unit of Measure:</label>
                    <InputText class="form-control" @bind-Value="quoteInventory.UnitOfMeasure" />
                </div>
            </div>



                <!-- New Fields: Actual quoted items, user input required -->
            <style>
                .dashed-line {
                    border: none;
                    border-top: 3px dashed red;
                    width: 100%;
                    margin: 10px 0;
                }
            </style>
            <div>
                <hr class="dashed-line" />
            </div>
            <div class="row">
                <div class="col-md-6">
                    <label>Quote Price:</label>
                    <InputNumber class="form-control" @bind-Value="quoteInventory.QuotePrice" />
                </div>

                <div class="col-md-6">
                    <label>Unit of Measure/Acre:</label>
                    <InputText class="form-control" @bind-Value="quoteInventory.QuoteUnitOfMeasure" />
                </div>

                <div class="col-md-6">
                    <label>Quantity Per Acre:</label>
                    <InputNumber class="form-control" @bind-Value="quoteInventory.QuantityPerAcre" />
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <button type="button" class="btn btn-danger" @onclick="() => RemoveInventory(quoteInventory)">Remove</button>
                    </div>
                </div>

            </div>
        }

        <button type="button" class="btn btn-secondary" @onclick="AddNewInventory">Add Inventory</button>
        <button type="submit" class="btn btn-success">Save Quote</button>
    </EditForm>
}

<hr />

<h3>Existing Quotes</h3>
<table class="table">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Street</th>
            <th>City</th>
            <th>State</th>
            <th>Zipcode</th>
            <th>Phone</th>
            <th>Inventory</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var quote in Quotes)
        {
            <tr>
                <td>@quote.Customer?.CustomerBusinessName</td>
                <td>@quote.QuoteStreet</td>
                <td>@quote.QuoteCity</td>
                <td>@quote.QuoteState</td>
                <td>@quote.QuoteZipcode</td>
                <td>@quote.QuotePhone</td>
                <td>
                    @foreach (var quoteInventory in quote.QuoteInventories)
                    {
                        <div>@quoteInventory.Inventory.ChemicalName</div>
                    }
                </td>
                @*                 <td>@quote.QuotePrice</td> *@
                <td>
                    <button @onclick="() => EditQuote(quote.Id)" class="btn btn-warning">Edit</button>
                    <button @onclick="() => DeleteQuote(quote.Id)" class="btn btn-danger">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Quote> Quotes = new();
    private List<Customer> Customers = new();
    private List<Inventory> Inventories = new();
    private Quote NewQuote = new() { QuoteInventories = new List<QuoteInventory>() };
    private bool showQuoteForm = false;

    private int SelectedCustomerId
    {
        get => NewQuote.CustomerId;
        set
        {
            NewQuote.CustomerId = value;
            var selectedCustomer = Customers.FirstOrDefault(c => c.Id == value);
            if (selectedCustomer != null)
            {
                NewQuote.CustomerBusinessName = selectedCustomer.CustomerBusinessName;
                NewQuote.QuoteStreet = selectedCustomer.CustomerStreet;
                NewQuote.QuoteCity = selectedCustomer.CustomerCity;
                NewQuote.QuoteState = selectedCustomer.CustomerState;
                NewQuote.QuoteZipcode = selectedCustomer.CustomerZipCode;
                NewQuote.QuotePhone = selectedCustomer.CustomerPhone;
            }
        }
    }

    private void HandleInventoryChange(QuoteInventory quoteInventory, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int inventoryId))
        {
            quoteInventory.InventoryId = inventoryId;

            // Get the selected inventory
            var selectedInventory = Inventories.FirstOrDefault(i => i.Id == inventoryId);
            if (selectedInventory != null)
            {
                quoteInventory.Inventory = selectedInventory; // Ensure Inventory property is set
                quoteInventory.ChemicalName = selectedInventory.ChemicalName;
                quoteInventory.UnitOfMeasure = selectedInventory.UnitOfMeasure;
                quoteInventory.EPA = selectedInventory.EPA;
                quoteInventory.Price = selectedInventory.Price;

                // Log the selected inventory details
                System.Diagnostics.Debug.WriteLine($"Inventory Selected: {selectedInventory.ChemicalName}");
            }

            StateHasChanged(); // Force the UI to refresh and reflect changes
        }
    }




    private async Task UpdateInventoryDetails(QuoteInventory quoteInventory)
    {
        var selectedInventory = Inventories.FirstOrDefault(i => i.Id == quoteInventory.InventoryId);
        if (selectedInventory != null)
        {
            quoteInventory.UnitOfMeasure = selectedInventory.UnitOfMeasure;
            quoteInventory.EPA = selectedInventory.EPA;
            quoteInventory.Price = selectedInventory.Price;
        }



        // New fields for user input
        quoteInventory.QuantityPerAcre = quoteInventory.QuantityPerAcre;
        quoteInventory.QuoteUnitOfMeasure = quoteInventory.QuoteUnitOfMeasure;
        quoteInventory.QuotePrice = quoteInventory.QuotePrice;

        StateHasChanged(); // Ensure the UI is updated after changing quoteInventory
    }

    private void AddNewInventory()
    {
        var newInventory = new QuoteInventory
            {
                InventoryId = -1, // Use a unique temporary ID for new items
                Inventory = new Inventory(),  // Ensure the Inventory property is initialized
                ChemicalName = "Default Chemical" // Add a default value for debugging
            };
        NewQuote.QuoteInventories.Add(newInventory);
        System.Diagnostics.Debug.WriteLine($"Added new Inventory - InventoryId: {newInventory.InventoryId}, ChemicalName: {newInventory.ChemicalName}");
        StateHasChanged(); // Force the UI to refresh and reflect changes
    }






    protected override async Task OnInitializedAsync()
    {
        Customers = await CustomerService.GetAllCustomersAsync();
        Inventories = await InventoryService.GetAllInventoriesAsync();
        Quotes = await QuoteService.GetQuotesAsync();
    }

    private void ToggleQuoteForm()
    {
        showQuoteForm = !showQuoteForm;
        StateHasChanged(); // Ensure the UI is updated to reflect changes
    }

    private async Task SaveQuote()
    {
        // Debug check: Ensure ChemicalName is set for all inventories
        foreach (var qi in NewQuote.QuoteInventories)
        {
            System.Diagnostics.Debug.WriteLine($"Before Save - InventoryId: {qi.InventoryId}, ChemicalName: {qi.ChemicalName}");
            if (string.IsNullOrEmpty(qi.ChemicalName))
            {
                throw new InvalidOperationException("ChemicalName must be set for all QuoteInventories.");
            }
        }

        if (NewQuote.Id == 0)
        {
            await QuoteService.AddQuoteAsync(NewQuote);
        }
        else
        {
            await QuoteService.UpdateQuoteAsync(NewQuote);
        }

        NewQuote = new Quote() { QuoteInventories = new List<QuoteInventory>() };
        Quotes = await QuoteService.GetQuotesAsync();
        showQuoteForm = false;
        StateHasChanged(); // Ensure the UI is updated to reflect changes
    }




    private async Task EditQuote(int id)
    {
        NewQuote = await QuoteService.GetQuoteByIdAsync(id);
        showQuoteForm = true;
        StateHasChanged(); // Ensure the UI is updated to reflect changes
    }

    private async Task DeleteQuote(int id)
    {
        await QuoteService.DeleteQuoteAsync(id);
        Quotes = await QuoteService.GetQuotesAsync();
        StateHasChanged(); // Ensure the UI is updated to reflect changes
    }

    private void RemoveInventory(QuoteInventory quoteInventory)
    {
        NewQuote.QuoteInventories.Remove(quoteInventory);
        StateHasChanged(); // Force the UI to refresh and reflect changes
    }

}
